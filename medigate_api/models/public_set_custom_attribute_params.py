# coding: utf-8

"""
    Medigate API

    # Authentication To use this API, create an API user from Admin Settings > User Management, and generate an API token. Use the token as an [HTTP bearer token](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication#authentication_schemes) to authenticate and authorize your API requests.  To use the token, add an `Authorization` header such as: ``` Authorization: Bearer <your token here> ```  # API Conventions  ## Pagination The endpoints in this API are paginated. To iteratively obtain all data, make repeated requests with increasing `offset` starting at 0, and constant `limit`. For example, `{\"offset\": 0, \"limit\": 100}`, followed by `{\"offset\": 100, \"limit\": 100}`, `{\"offset\": 200, \"limit\": 100}`, until less than `limit` results are returned.  ## Filters The endpoints in this API accept a `filter_by` argument to filter the results returned by the endpoint. Filters can be simple filters over a single field, or compound filters made up of other fields. For an example, look at the `filter_by` parameter of the endpoints below.  ### Simple Filters Filters a single field of the result set. The `operation` may be one of:  |`operation`s|Description|`value` Type| |---|---|---| |`in`, `not_in`|Checks for equality/inequality of any of the values|Array of values| |`contains`, `not_contains`|Checks if the string in `value` is contained in the field|string| |`in_subnet`, `not_in_subnet`|Checks if an IP field is in the subnet in `value`|string or list of strings specifying an IP subnet in CIDR notation, such as `\"192.168.1.0/24\"`| | `is_null`, `is_not_null`|Checks if the field has null value|_None_| |`greater`, `greater_or_equal`, `less`, `less_or_equal`|Compares with `value`|a number or timestamp (ISO format) to compare with| |`after_seconds_ago`, `before_seconds_ago`|Compares the field with a timestamp relative to the current date and time|number of seconds|  ### Compound Filters Simple filters can be combined with compound filters. The supported `operation`s are: * `not` - Takes a single filter in `operands`, and negates the filter's condition * `and`, `or` - Take multiple filters in `operands`, and combines them with the appropriate boolean operation

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr
from medigate_api.models.public_device_target_spec import PublicDeviceTargetSpec

class PublicSetCustomAttributeParams(BaseModel):
    """
    The base class for parameters to a user annotations endpoint, specifying the target of the operation.  The target_specification is often a subclass of TargetSpec which includes a specification of exactly which targets should be operated on, such as a group of pagination parameters or a set of ids, but at the very minimum it must include the target type.  # noqa: E501
    """
    target_specification: PublicDeviceTargetSpec = Field(...)
    custom_attribute_api_name: StrictStr = Field(..., description="The API name of the custom attribute whose value should be set.")
    value: StrictStr = Field(..., description="The value to store to the custom attribute. Can be `null` to clear the existing value.")
    __properties = ["target_specification", "custom_attribute_api_name", "value"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PublicSetCustomAttributeParams:
        """Create an instance of PublicSetCustomAttributeParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of target_specification
        if self.target_specification:
            _dict['target_specification'] = self.target_specification.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PublicSetCustomAttributeParams:
        """Create an instance of PublicSetCustomAttributeParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PublicSetCustomAttributeParams.parse_obj(obj)

        _obj = PublicSetCustomAttributeParams.parse_obj({
            "target_specification": PublicDeviceTargetSpec.from_dict(obj.get("target_specification")) if obj.get("target_specification") is not None else None,
            "custom_attribute_api_name": obj.get("custom_attribute_api_name"),
            "value": obj.get("value")
        })
        return _obj


