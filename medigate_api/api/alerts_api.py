# coding: utf-8

"""
    Medigate API

    # Authentication To use this API, create an API user from Admin Settings > User Management, and generate an API token. Use the token as an [HTTP bearer token](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication#authentication_schemes) to authenticate and authorize your API requests.  To use the token, add an `Authorization` header such as: ``` Authorization: Bearer <your token here> ```  # API Conventions  ## Pagination The endpoints in this API are paginated. To iteratively obtain all data, make repeated requests with increasing `offset` starting at 0, and constant `limit`. For example, `{\"offset\": 0, \"limit\": 100}`, followed by `{\"offset\": 100, \"limit\": 100}`, `{\"offset\": 200, \"limit\": 100}`, until less than `limit` results are returned.  ## Filters The endpoints in this API accept a `filter_by` argument to filter the results returned by the endpoint. Filters can be simple filters over a single field, or compound filters made up of other fields. For an example, look at the `filter_by` parameter of the endpoints below.  ### Simple Filters Filters a single field of the result set. The `operation` may be one of:  |`operation`s|Description|`value` Type| |---|---|---| |`in`, `not_in`|Checks for equality/inequality of any of the values|Array of values| |`contains`, `not_contains`|Checks if the string in `value` is contained in the field|string| |`in_subnet`, `not_in_subnet`|Checks if an IP field is in the subnet in `value`|string or list of strings specifying an IP subnet in CIDR notation, such as `\"192.168.1.0/24\"`| | `is_null`, `is_not_null`|Checks if the field has null value|_None_| |`greater`, `greater_or_equal`, `less`, `less_or_equal`|Compares with `value`|a number or timestamp (ISO format) to compare with| |`after_seconds_ago`, `before_seconds_ago`|Compares the field with a timestamp relative to the current date and time|number of seconds|  ### Compound Filters Simple filters can be combined with compound filters. The supported `operation`s are: * `not` - Takes a single filter in `operands`, and negates the filter's condition * `and`, `or` - Take multiple filters in `operands`, and combines them with the appropriate boolean operation

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictInt

from typing import Any

from medigate_api.models.get_alerted_devices_parameters import GetAlertedDevicesParameters
from medigate_api.models.get_alerted_devices_response import GetAlertedDevicesResponse
from medigate_api.models.get_alerts_parameters import GetAlertsParameters
from medigate_api.models.get_alerts_response import GetAlertsResponse
from medigate_api.models.public_set_alert_resolution_params import PublicSetAlertResolutionParams

from medigate_api.api_client import ApiClient
from medigate_api.api_response import ApiResponse
from medigate_api.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class AlertsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_alert_devices_api_v1_alerts_alert_id_devices_post(self, alert_id : Annotated[StrictInt, Field(..., description="Alert ID, as indicated in the `id` field of an alert")], get_alerted_devices_parameters : GetAlertedDevicesParameters, **kwargs) -> GetAlertedDevicesResponse:  # noqa: E501
        """Get devices affected by an alert  # noqa: E501

        Get devices affected by an alert. This endpoint returns similar data to the [Get details of devices][1] endpoint, except that only affected devices are returned. There is also an additional device field indicating if the alert is resolved for the device.  ### Fields supported by this endpoint All fields supported by [Get details of devices][1] endpoint, and additionally:  | Field         | Description                                                                              | Supported Operations                                        | |---------------|------------------------------------------------------------------------------------------|-------------------------------------------------------------| | `is_resolved` | A boolean field indicating if the alert triggered for a device is resolved or unresolved | `is_null`,`not_equals`,`is_not_null`,`not_in`,`equals`,`in` |   [1]: #operation/get_devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_alert_devices_api_v1_alerts_alert_id_devices_post(alert_id, get_alerted_devices_parameters, async_req=True)
        >>> result = thread.get()

        :param alert_id: Alert ID, as indicated in the `id` field of an alert (required)
        :type alert_id: int
        :param get_alerted_devices_parameters: (required)
        :type get_alerted_devices_parameters: GetAlertedDevicesParameters
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetAlertedDevicesResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_alert_devices_api_v1_alerts_alert_id_devices_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_alert_devices_api_v1_alerts_alert_id_devices_post_with_http_info(alert_id, get_alerted_devices_parameters, **kwargs)  # noqa: E501

    @validate_arguments
    def get_alert_devices_api_v1_alerts_alert_id_devices_post_with_http_info(self, alert_id : Annotated[StrictInt, Field(..., description="Alert ID, as indicated in the `id` field of an alert")], get_alerted_devices_parameters : GetAlertedDevicesParameters, **kwargs) -> ApiResponse:  # noqa: E501
        """Get devices affected by an alert  # noqa: E501

        Get devices affected by an alert. This endpoint returns similar data to the [Get details of devices][1] endpoint, except that only affected devices are returned. There is also an additional device field indicating if the alert is resolved for the device.  ### Fields supported by this endpoint All fields supported by [Get details of devices][1] endpoint, and additionally:  | Field         | Description                                                                              | Supported Operations                                        | |---------------|------------------------------------------------------------------------------------------|-------------------------------------------------------------| | `is_resolved` | A boolean field indicating if the alert triggered for a device is resolved or unresolved | `is_null`,`not_equals`,`is_not_null`,`not_in`,`equals`,`in` |   [1]: #operation/get_devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_alert_devices_api_v1_alerts_alert_id_devices_post_with_http_info(alert_id, get_alerted_devices_parameters, async_req=True)
        >>> result = thread.get()

        :param alert_id: Alert ID, as indicated in the `id` field of an alert (required)
        :type alert_id: int
        :param get_alerted_devices_parameters: (required)
        :type get_alerted_devices_parameters: GetAlertedDevicesParameters
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetAlertedDevicesResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'alert_id',
            'get_alerted_devices_parameters'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_alert_devices_api_v1_alerts_alert_id_devices_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['alert_id'] is not None:
            _path_params['alert_id'] = _params['alert_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['get_alerted_devices_parameters'] is not None:
            _body_params = _params['get_alerted_devices_parameters']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['CustomHTTPBearer']  # noqa: E501

        _response_types_map = {
            '200': "GetAlertedDevicesResponse",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/alerts/{alert_id}/devices', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_alerts_api_v1_alerts_post(self, get_alerts_parameters : GetAlertsParameters, **kwargs) -> GetAlertsResponse:  # noqa: E501
        """Get details of alerts  # noqa: E501

        The data returned by this endpoint corresponds to the Alerts table in the dashboard.  Alerts are returned in ascending Alert ID order.  ### Fields supported by this endpoint  <details><summary>Click to expand</summary>  | Field                      | Description                                                                                                                                           | Supported Operations| |----------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------|| | `id`                       | Platform unique Alert ID                                                                                                                              | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`less`,`between`,`not_ends_with`,`not_contains`,`greater`,`not_starts_with`,`in`                                                                                                                                                                                                                                                                                                                             | | `alert_name`               | The alert name, such as “Malicious Internet Communication: 62.172.138.35”                                                                             | `starts_with`,`not_equals`,`ends_with`,`not_in`,`not_ends_with`,`not_contains`,`is_null`,`not_starts_with`,`is_not_null`,`equals`,`in`,`contains`                                                                                                                                                                                                                                                                                                                                                                                                         | | `alert_type_name`          | An alert type such as \"Outdated Firmware\"                                                                                                             | `starts_with`,`not_equals`,`ends_with`,`not_in`,`not_ends_with`,`not_contains`,`is_null`,`not_starts_with`,`is_not_null`,`equals`,`in`,`contains`                                                                                                                                                                                                                                                                                                                                                                                                         | | `alert_class`              | The alert class, such as “Pre-Defined Alerts” and “Custom Alerts”                                                                                     | `starts_with`,`not_equals`,`ends_with`,`not_in`,`not_ends_with`,`not_contains`,`is_null`,`not_starts_with`,`is_not_null`,`equals`,`in`,`contains`                                                                                                                                                                                                                                                                                                                                                                                                         | | `category`                 | Alert category such as \"Risk\" or \"Segmentation\"                                                                                                       | `starts_with`,`not_equals`,`ends_with`,`not_in`,`not_ends_with`,`not_contains`,`is_null`,`not_starts_with`,`is_not_null`,`equals`,`in`,`contains`                                                                                                                                                                                                                                                                                                                                                                                                         | | `detected_time`            | Date and time when the Alert was first detected                                                                                                       | `not_equals`,`after_seconds_from_now`,`less_or_equal`,`after_seconds_ago`,`greater_or_equal`,`not_between`,`is_null`,`before`,`after`,`is_not_null`,`equals`,`before_seconds_ago`,`not_in`,`between`,`less`,`greater`,`before_seconds_from_now`,`in`                                                                                                                                                                                                                                                                                                      | | `updated_time`             | Date and time of last Alert update                                                                                                                    | `not_equals`,`after_seconds_from_now`,`less_or_equal`,`after_seconds_ago`,`greater_or_equal`,`not_between`,`is_null`,`before`,`after`,`is_not_null`,`equals`,`before_seconds_ago`,`not_in`,`between`,`less`,`greater`,`before_seconds_from_now`,`in`                                                                                                                                                                                                                                                                                                      | | `devices_count`            | Number of total affected devices                                                                                                                      | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`less`,`between`,`not_ends_with`,`not_contains`,`greater`,`not_starts_with`,`in`                                                                                                                                                                                                                                                                                                                             | | `unresolved_devices_count` | Number of unresolved devices                                                                                                                          | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`less`,`between`,`not_ends_with`,`not_contains`,`greater`,`not_starts_with`,`in`                                                                                                                                                                                                                                                                                                                             | | `medical_devices_count`    | Number of affected Medical devices                                                                                                                    | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`less`,`between`,`not_ends_with`,`not_contains`,`greater`,`not_starts_with`,`in`                                                                                                                                                                                                                                                                                                                             | | `iot_devices_count`        | Number of affected IoT devices                                                                                                                        | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`less`,`between`,`not_ends_with`,`not_contains`,`greater`,`not_starts_with`,`in`                                                                                                                                                                                                                                                                                                                             | | `it_devices_count`         | Number of affected IT devices                                                                                                                         | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`less`,`between`,`not_ends_with`,`not_contains`,`greater`,`not_starts_with`,`in`                                                                                                                                                                                                                                                                                                                             | | `ot_devices_count`         | Number of affected OT devices                                                                                                                         | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`less`,`between`,`not_ends_with`,`not_contains`,`greater`,`not_starts_with`,`in`                                                                                                                                                                                                                                                                                                                             | | `status`                   | Alert status such as \"Resolved\" or \"Acknowledged\"                                                                                                     | _Not filterable_                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          | | `malicious_ip_tags_list`   | The Malicious IP Tags, powered by Anomali, associated with the Attempted Malicious Internet Communication and Malicious Internet Communication alerts | `has_any_not_ends_with`,`has_only_ends_with`,`has_only_equals`,`has_none_contains`,`equals`,`has_only_starts_with`,`contains`,`has_only_contains`,`has_none_ends_with`,`has_all_equals`,`not_contains`,`superset_of`,`none_equal`,`in`,`has_none_equals`,`starts_with`,`not_equals`,`has_none_starts_with`,`has_any_not_contains`,`is_null`,`has_any_contains`,`has_any_ends_with`,`is_not_null`,`all_equal`,`has_any_equals`,`ends_with`,`not_in`,`has_any_not_equals`,`not_ends_with`,`has_any_starts_with`,`has_any_not_starts_with`,`not_starts_with` |  </details>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_alerts_api_v1_alerts_post(get_alerts_parameters, async_req=True)
        >>> result = thread.get()

        :param get_alerts_parameters: (required)
        :type get_alerts_parameters: GetAlertsParameters
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetAlertsResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_alerts_api_v1_alerts_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_alerts_api_v1_alerts_post_with_http_info(get_alerts_parameters, **kwargs)  # noqa: E501

    @validate_arguments
    def get_alerts_api_v1_alerts_post_with_http_info(self, get_alerts_parameters : GetAlertsParameters, **kwargs) -> ApiResponse:  # noqa: E501
        """Get details of alerts  # noqa: E501

        The data returned by this endpoint corresponds to the Alerts table in the dashboard.  Alerts are returned in ascending Alert ID order.  ### Fields supported by this endpoint  <details><summary>Click to expand</summary>  | Field                      | Description                                                                                                                                           | Supported Operations| |----------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------|| | `id`                       | Platform unique Alert ID                                                                                                                              | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`less`,`between`,`not_ends_with`,`not_contains`,`greater`,`not_starts_with`,`in`                                                                                                                                                                                                                                                                                                                             | | `alert_name`               | The alert name, such as “Malicious Internet Communication: 62.172.138.35”                                                                             | `starts_with`,`not_equals`,`ends_with`,`not_in`,`not_ends_with`,`not_contains`,`is_null`,`not_starts_with`,`is_not_null`,`equals`,`in`,`contains`                                                                                                                                                                                                                                                                                                                                                                                                         | | `alert_type_name`          | An alert type such as \"Outdated Firmware\"                                                                                                             | `starts_with`,`not_equals`,`ends_with`,`not_in`,`not_ends_with`,`not_contains`,`is_null`,`not_starts_with`,`is_not_null`,`equals`,`in`,`contains`                                                                                                                                                                                                                                                                                                                                                                                                         | | `alert_class`              | The alert class, such as “Pre-Defined Alerts” and “Custom Alerts”                                                                                     | `starts_with`,`not_equals`,`ends_with`,`not_in`,`not_ends_with`,`not_contains`,`is_null`,`not_starts_with`,`is_not_null`,`equals`,`in`,`contains`                                                                                                                                                                                                                                                                                                                                                                                                         | | `category`                 | Alert category such as \"Risk\" or \"Segmentation\"                                                                                                       | `starts_with`,`not_equals`,`ends_with`,`not_in`,`not_ends_with`,`not_contains`,`is_null`,`not_starts_with`,`is_not_null`,`equals`,`in`,`contains`                                                                                                                                                                                                                                                                                                                                                                                                         | | `detected_time`            | Date and time when the Alert was first detected                                                                                                       | `not_equals`,`after_seconds_from_now`,`less_or_equal`,`after_seconds_ago`,`greater_or_equal`,`not_between`,`is_null`,`before`,`after`,`is_not_null`,`equals`,`before_seconds_ago`,`not_in`,`between`,`less`,`greater`,`before_seconds_from_now`,`in`                                                                                                                                                                                                                                                                                                      | | `updated_time`             | Date and time of last Alert update                                                                                                                    | `not_equals`,`after_seconds_from_now`,`less_or_equal`,`after_seconds_ago`,`greater_or_equal`,`not_between`,`is_null`,`before`,`after`,`is_not_null`,`equals`,`before_seconds_ago`,`not_in`,`between`,`less`,`greater`,`before_seconds_from_now`,`in`                                                                                                                                                                                                                                                                                                      | | `devices_count`            | Number of total affected devices                                                                                                                      | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`less`,`between`,`not_ends_with`,`not_contains`,`greater`,`not_starts_with`,`in`                                                                                                                                                                                                                                                                                                                             | | `unresolved_devices_count` | Number of unresolved devices                                                                                                                          | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`less`,`between`,`not_ends_with`,`not_contains`,`greater`,`not_starts_with`,`in`                                                                                                                                                                                                                                                                                                                             | | `medical_devices_count`    | Number of affected Medical devices                                                                                                                    | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`less`,`between`,`not_ends_with`,`not_contains`,`greater`,`not_starts_with`,`in`                                                                                                                                                                                                                                                                                                                             | | `iot_devices_count`        | Number of affected IoT devices                                                                                                                        | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`less`,`between`,`not_ends_with`,`not_contains`,`greater`,`not_starts_with`,`in`                                                                                                                                                                                                                                                                                                                             | | `it_devices_count`         | Number of affected IT devices                                                                                                                         | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`less`,`between`,`not_ends_with`,`not_contains`,`greater`,`not_starts_with`,`in`                                                                                                                                                                                                                                                                                                                             | | `ot_devices_count`         | Number of affected OT devices                                                                                                                         | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`less`,`between`,`not_ends_with`,`not_contains`,`greater`,`not_starts_with`,`in`                                                                                                                                                                                                                                                                                                                             | | `status`                   | Alert status such as \"Resolved\" or \"Acknowledged\"                                                                                                     | _Not filterable| | `malicious_ip_tags_list`   | The Malicious IP Tags, powered by Anomali, associated with the Attempted Malicious Internet Communication and Malicious Internet Communication alerts | `has_any_not_ends_with`,`has_only_ends_with`,`has_only_equals`,`has_none_contains`,`equals`,`has_only_starts_with`,`contains`,`has_only_contains`,`has_none_ends_with`,`has_all_equals`,`not_contains`,`superset_of`,`none_equal`,`in`,`has_none_equals`,`starts_with`,`not_equals`,`has_none_starts_with`,`has_any_not_contains`,`is_null`,`has_any_contains`,`has_any_ends_with`,`is_not_null`,`all_equal`,`has_any_equals`,`ends_with`,`not_in`,`has_any_not_equals`,`not_ends_with`,`has_any_starts_with`,`has_any_not_starts_with`,`not_starts_with` |  </details>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_alerts_api_v1_alerts_post_with_http_info(get_alerts_parameters, async_req=True)
        >>> result = thread.get()

        :param get_alerts_parameters: (required)
        :type get_alerts_parameters: GetAlertsParameters
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetAlertsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'get_alerts_parameters'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_alerts_api_v1_alerts_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['get_alerts_parameters'] is not None:
            _body_params = _params['get_alerts_parameters']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['CustomHTTPBearer']  # noqa: E501

        _response_types_map = {
            '200': "GetAlertsResponse",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/alerts/', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def set_alert_resolution_api_v1_device_alert_status_set_post(self, public_set_alert_resolution_params : PublicSetAlertResolutionParams, **kwargs) -> object:  # noqa: E501
        """Set status for device alert relations  # noqa: E501

        Set device-alert status to resolved or unresolved. If no filter_by parameter is provided, this API call will resolve or unresolve all device-alert relations for the specified alert IDs. if a filter_by parameter is provided, the API call will exclusively resolve or unresolve device-alert relations that meet the specified filter criteria   ### Fields supported by this endpoint All fields supported by [Get details of devices][1].  [1]: #operation/get_devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_alert_resolution_api_v1_device_alert_status_set_post(public_set_alert_resolution_params, async_req=True)
        >>> result = thread.get()

        :param public_set_alert_resolution_params: (required)
        :type public_set_alert_resolution_params: PublicSetAlertResolutionParams
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the set_alert_resolution_api_v1_device_alert_status_set_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.set_alert_resolution_api_v1_device_alert_status_set_post_with_http_info(public_set_alert_resolution_params, **kwargs)  # noqa: E501

    @validate_arguments
    def set_alert_resolution_api_v1_device_alert_status_set_post_with_http_info(self, public_set_alert_resolution_params : PublicSetAlertResolutionParams, **kwargs) -> ApiResponse:  # noqa: E501
        """Set status for device alert relations  # noqa: E501

        Set device-alert status to resolved or unresolved. If no filter_by parameter is provided, this API call will resolve or unresolve all device-alert relations for the specified alert IDs. if a filter_by parameter is provided, the API call will exclusively resolve or unresolve device-alert relations that meet the specified filter criteria   ### Fields supported by this endpoint All fields supported by [Get details of devices][1].  [1]: #operation/get_devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_alert_resolution_api_v1_device_alert_status_set_post_with_http_info(public_set_alert_resolution_params, async_req=True)
        >>> result = thread.get()

        :param public_set_alert_resolution_params: (required)
        :type public_set_alert_resolution_params: PublicSetAlertResolutionParams
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'public_set_alert_resolution_params'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_alert_resolution_api_v1_device_alert_status_set_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['public_set_alert_resolution_params'] is not None:
            _body_params = _params['public_set_alert_resolution_params']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['CustomHTTPBearer']  # noqa: E501

        _response_types_map = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/device-alert-status/set', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
