# coding: utf-8

"""
    Medigate API

    # Authentication To use this API, create an API user from Admin Settings > User Management, and generate an API token. Use the token as an [HTTP bearer token](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication#authentication_schemes) to authenticate and authorize your API requests.  To use the token, add an `Authorization` header such as: ``` Authorization: Bearer <your token here> ```  # API Conventions  ## Pagination The endpoints in this API are paginated. To iteratively obtain all data, make repeated requests with increasing `offset` starting at 0, and constant `limit`. For example, `{\"offset\": 0, \"limit\": 100}`, followed by `{\"offset\": 100, \"limit\": 100}`, `{\"offset\": 200, \"limit\": 100}`, until less than `limit` results are returned.  ## Filters The endpoints in this API accept a `filter_by` argument to filter the results returned by the endpoint. Filters can be simple filters over a single field, or compound filters made up of other fields. For an example, look at the `filter_by` parameter of the endpoints below.  ### Simple Filters Filters a single field of the result set. The `operation` may be one of:  |`operation`s|Description|`value` Type| |---|---|---| |`in`, `not_in`|Checks for equality/inequality of any of the values|Array of values| |`contains`, `not_contains`|Checks if the string in `value` is contained in the field|string| |`in_subnet`, `not_in_subnet`|Checks if an IP field is in the subnet in `value`|string or list of strings specifying an IP subnet in CIDR notation, such as `\"192.168.1.0/24\"`| | `is_null`, `is_not_null`|Checks if the field has null value|_None_| |`greater`, `greater_or_equal`, `less`, `less_or_equal`|Compares with `value`|a number or timestamp (ISO format) to compare with| |`after_seconds_ago`, `before_seconds_ago`|Compares the field with a timestamp relative to the current date and time|number of seconds|  ### Compound Filters Simple filters can be combined with compound filters. The supported `operation`s are: * `not` - Takes a single filter in `operands`, and negates the filter's condition * `and`, `or` - Take multiple filters in `operands`, and combines them with the appropriate boolean operation

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from medigate_api.models.get_server_interfaces_parameters import GetServerInterfacesParameters
from medigate_api.models.get_server_interfaces_response import GetServerInterfacesResponse
from medigate_api.models.get_servers_parameters import GetServersParameters
from medigate_api.models.get_servers_response import GetServersResponse

from medigate_api.api_client import ApiClient
from medigate_api.api_response import ApiResponse
from medigate_api.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class PassiveCollectionsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_servers_api_v1_server_interfaces_post(self, get_server_interfaces_parameters : GetServerInterfacesParameters, **kwargs) -> GetServerInterfacesResponse:  # noqa: E501
        """Get server interfaces  # noqa: E501

        Get details of server interfaces from the database. The data returned by this endpoint corresponds to the Server Interfaces table in the dashboard.  ### Fields supported by this endpoint  <details><summary>Click to expand</summary>  | Field                         | Description                                                                                                | Supported Operations                                                                                                                                                                                                          | |-------------------------------|------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| | `server_name`                 | Indicates the collection server name that is set during deployment                                         | `starts_with`,`not_equals`,`ends_with`,`not_in`,`not_ends_with`,`not_contains`,`is_null`,`not_starts_with`,`is_not_null`,`equals`,`in`,`contains`                                                                             | | `interface_name`              | Indicates the name of the interface                                                                        | `starts_with`,`not_equals`,`ends_with`,`not_in`,`not_ends_with`,`not_contains`,`is_null`,`not_starts_with`,`is_not_null`,`equals`,`in`,`contains`                                                                             | | `interface_status`            | Indicates the availability status of the interface: Up, No Carrier                                         | `starts_with`,`not_equals`,`ends_with`,`not_in`,`not_ends_with`,`not_contains`,`is_null`,`not_starts_with`,`is_not_null`,`equals`,`in`,`contains`                                                                             | | `interface_type`              | Indicates the types of interface: SPAN, Management                                                         | `starts_with`,`not_equals`,`ends_with`,`not_in`,`not_ends_with`,`not_contains`,`is_null`,`not_starts_with`,`is_not_null`,`equals`,`in`,`contains`                                                                             | | `interface_connection_type`   | Indicates how the interface is connected to the network: SFP+, RJ45 (Copper)                               | `starts_with`,`not_equals`,`ends_with`,`not_in`,`not_ends_with`,`not_contains`,`is_null`,`not_starts_with`,`is_not_null`,`equals`,`in`,`contains`                                                                             | | `avg_traffic_past_month_mbps` | Indicates the average volume in megabits per second (Mbps) of traffic sent to the server in the past month | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`less`,`between`,`not_ends_with`,`not_contains`,`greater`,`not_starts_with`,`in` | | `avg_traffic_past_week_mbps`  | Indicates the average volume in megabits per second (Mbps) of traffic sent to the server in the past week  | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`less`,`between`,`not_ends_with`,`not_contains`,`greater`,`not_starts_with`,`in` | | `avg_traffic_past_hour_mbps`  | Indicates the average volume in megabits per second (Mbps) of traffic sent to the server in the past hour  | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`less`,`between`,`not_ends_with`,`not_contains`,`greater`,`not_starts_with`,`in` | | `notes`                       | Notes about the interface                                                                                  | `starts_with`,`not_equals`,`ends_with`,`not_in`,`not_ends_with`,`not_contains`,`is_null`,`not_starts_with`,`is_not_null`,`equals`,`in`,`contains`                                                                             |  </details>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_servers_api_v1_server_interfaces_post(get_server_interfaces_parameters, async_req=True)
        >>> result = thread.get()

        :param get_server_interfaces_parameters: (required)
        :type get_server_interfaces_parameters: GetServerInterfacesParameters
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetServerInterfacesResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_servers_api_v1_server_interfaces_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_servers_api_v1_server_interfaces_post_with_http_info(get_server_interfaces_parameters, **kwargs)  # noqa: E501

    @validate_arguments
    def get_servers_api_v1_server_interfaces_post_with_http_info(self, get_server_interfaces_parameters : GetServerInterfacesParameters, **kwargs) -> ApiResponse:  # noqa: E501
        """Get server interfaces  # noqa: E501

        Get details of server interfaces from the database. The data returned by this endpoint corresponds to the Server Interfaces table in the dashboard.  ### Fields supported by this endpoint  <details><summary>Click to expand</summary>  | Field                         | Description                                                                                                | Supported Operations                                                                                                                                                                                                          | |-------------------------------|------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| | `server_name`                 | Indicates the collection server name that is set during deployment                                         | `starts_with`,`not_equals`,`ends_with`,`not_in`,`not_ends_with`,`not_contains`,`is_null`,`not_starts_with`,`is_not_null`,`equals`,`in`,`contains`                                                                             | | `interface_name`              | Indicates the name of the interface                                                                        | `starts_with`,`not_equals`,`ends_with`,`not_in`,`not_ends_with`,`not_contains`,`is_null`,`not_starts_with`,`is_not_null`,`equals`,`in`,`contains`                                                                             | | `interface_status`            | Indicates the availability status of the interface: Up, No Carrier                                         | `starts_with`,`not_equals`,`ends_with`,`not_in`,`not_ends_with`,`not_contains`,`is_null`,`not_starts_with`,`is_not_null`,`equals`,`in`,`contains`                                                                             | | `interface_type`              | Indicates the types of interface: SPAN, Management                                                         | `starts_with`,`not_equals`,`ends_with`,`not_in`,`not_ends_with`,`not_contains`,`is_null`,`not_starts_with`,`is_not_null`,`equals`,`in`,`contains`                                                                             | | `interface_connection_type`   | Indicates how the interface is connected to the network: SFP+, RJ45 (Copper)                               | `starts_with`,`not_equals`,`ends_with`,`not_in`,`not_ends_with`,`not_contains`,`is_null`,`not_starts_with`,`is_not_null`,`equals`,`in`,`contains`                                                                             | | `avg_traffic_past_month_mbps` | Indicates the average volume in megabits per second (Mbps) of traffic sent to the server in the past month | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`less`,`between`,`not_ends_with`,`not_contains`,`greater`,`not_starts_with`,`in` | | `avg_traffic_past_week_mbps`  | Indicates the average volume in megabits per second (Mbps) of traffic sent to the server in the past week  | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`less`,`between`,`not_ends_with`,`not_contains`,`greater`,`not_starts_with`,`in` | | `avg_traffic_past_hour_mbps`  | Indicates the average volume in megabits per second (Mbps) of traffic sent to the server in the past hour  | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`less`,`between`,`not_ends_with`,`not_contains`,`greater`,`not_starts_with`,`in` | | `notes`                       | Notes about the interface                                                                                  | `starts_with`,`not_equals`,`ends_with`,`not_in`,`not_ends_with`,`not_contains`,`is_null`,`not_starts_with`,`is_not_null`,`equals`,`in`,`contains`                                                                             |  </details>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_servers_api_v1_server_interfaces_post_with_http_info(get_server_interfaces_parameters, async_req=True)
        >>> result = thread.get()

        :param get_server_interfaces_parameters: (required)
        :type get_server_interfaces_parameters: GetServerInterfacesParameters
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetServerInterfacesResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'get_server_interfaces_parameters'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_servers_api_v1_server_interfaces_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['get_server_interfaces_parameters'] is not None:
            _body_params = _params['get_server_interfaces_parameters']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['CustomHTTPBearer']  # noqa: E501

        _response_types_map = {
            '200': "GetServerInterfacesResponse",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/server_interfaces/', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_servers_api_v1_servers_post(self, get_servers_parameters : GetServersParameters, **kwargs) -> GetServersResponse:  # noqa: E501
        """Get details of servers  # noqa: E501

        Get details of servers from the database. The data returned by this endpoint corresponds to the Servers table in the dashboard.  ### Fields supported by this endpoint  <details><summary>Click to expand</summary>  | Field                         | Description                                                                                                | Supported Operations                                                                                                                                                                                                                                      | |-------------------------------|------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| | `server_name`                 | Indicates the collection server name that is set during deployment                                         | `starts_with`,`not_equals`,`ends_with`,`not_in`,`not_ends_with`,`not_contains`,`is_null`,`not_starts_with`,`is_not_null`,`equals`,`in`,`contains`                                                                                                         | | `server_location`             | The physical location of each server                                                                       | `starts_with`,`not_equals`,`ends_with`,`not_in`,`not_ends_with`,`not_contains`,`is_null`,`not_starts_with`,`is_not_null`,`equals`,`in`,`contains`                                                                                                         | | `server_status`               | Indicates the operational status of the server: Up, Down and Pending                                       | `starts_with`,`not_equals`,`ends_with`,`not_in`,`not_ends_with`,`not_contains`,`is_null`,`not_starts_with`,`is_not_null`,`equals`,`in`,`contains`                                                                                                         | | `model`                       | Indicates the server model, such as: MCS R340 or R640                                                      | `starts_with`,`not_equals`,`ends_with`,`not_in`,`not_ends_with`,`not_contains`,`is_null`,`not_starts_with`,`is_not_null`,`equals`,`in`,`contains`                                                                                                         | | `os_version`                  | Ubuntu Operating System version                                                                            | `starts_with`,`not_equals`,`ends_with`,`not_in`,`not_ends_with`,`not_contains`,`is_null`,`not_starts_with`,`is_not_null`,`equals`,`in`,`contains`                                                                                                         | | `serial_number`               | Server serial number                                                                                       | `starts_with`,`not_equals`,`ends_with`,`not_in`,`not_ends_with`,`not_contains`,`is_null`,`not_starts_with`,`is_not_null`,`equals`,`in`,`contains`                                                                                                         | | `num_of_interfaces`           | The number of interfaces of the collection server                                                          | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`less`,`between`,`not_ends_with`,`not_contains`,`greater`,`not_starts_with`,`in`                             | | `management_ip`               | Indicates the Data/Management port IP address                                                              | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`between`,`less`,`not_ends_with`,`not_contains`,`greater`,`not_in_subnet`,`not_starts_with`,`in_subnet`,`in` | | `idrac_ip`                    | Indicates the IP address of the Integrated Dell Remote Access Controller (IDRAC)                           | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`between`,`less`,`not_ends_with`,`not_contains`,`greater`,`not_in_subnet`,`not_starts_with`,`in_subnet`,`in` | | `management_mac`              | Indicates the Data/Management port MAC address                                                             | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`less`,`between`,`not_ends_with`,`not_contains`,`greater`,`not_starts_with`,`in`                             | | `uptime_days`                 | Indicates the number of days the server is up                                                              | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`less`,`between`,`not_ends_with`,`not_contains`,`greater`,`not_starts_with`,`in`                             | | `avg_traffic_past_month_mbps` | Indicates the average volume in megabits per second (Mbps) of traffic sent to the server in the past month | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`less`,`between`,`not_ends_with`,`not_contains`,`greater`,`not_starts_with`,`in`                             | | `avg_traffic_past_week_mbps`  | Indicates the average volume in megabits per second (Mbps) of traffic sent to the server in the past week  | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`less`,`between`,`not_ends_with`,`not_contains`,`greater`,`not_starts_with`,`in`                             | | `avg_traffic_past_hour_mbps`  | Indicates the average volume in megabits per second (Mbps) of traffic sent to the server in the past hour  | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`less`,`between`,`not_ends_with`,`not_contains`,`greater`,`not_starts_with`,`in`                             | | `num_of_open_incidents`       | Indicates the number of open incidents                                                                     | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`less`,`between`,`not_ends_with`,`not_contains`,`greater`,`not_starts_with`,`in`                             | | `notes`                       | Notes about the server                                                                                     | `starts_with`,`not_equals`,`ends_with`,`not_in`,`not_ends_with`,`not_contains`,`is_null`,`not_starts_with`,`is_not_null`,`equals`,`in`,`contains`                                                                                                         |  </details>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_servers_api_v1_servers_post(get_servers_parameters, async_req=True)
        >>> result = thread.get()

        :param get_servers_parameters: (required)
        :type get_servers_parameters: GetServersParameters
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetServersResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_servers_api_v1_servers_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_servers_api_v1_servers_post_with_http_info(get_servers_parameters, **kwargs)  # noqa: E501

    @validate_arguments
    def get_servers_api_v1_servers_post_with_http_info(self, get_servers_parameters : GetServersParameters, **kwargs) -> ApiResponse:  # noqa: E501
        """Get details of servers  # noqa: E501

        Get details of servers from the database. The data returned by this endpoint corresponds to the Servers table in the dashboard.  ### Fields supported by this endpoint  <details><summary>Click to expand</summary>  | Field                         | Description                                                                                                | Supported Operations                                                                                                                                                                                                                                      | |-------------------------------|------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| | `server_name`                 | Indicates the collection server name that is set during deployment                                         | `starts_with`,`not_equals`,`ends_with`,`not_in`,`not_ends_with`,`not_contains`,`is_null`,`not_starts_with`,`is_not_null`,`equals`,`in`,`contains`                                                                                                         | | `server_location`             | The physical location of each server                                                                       | `starts_with`,`not_equals`,`ends_with`,`not_in`,`not_ends_with`,`not_contains`,`is_null`,`not_starts_with`,`is_not_null`,`equals`,`in`,`contains`                                                                                                         | | `server_status`               | Indicates the operational status of the server: Up, Down and Pending                                       | `starts_with`,`not_equals`,`ends_with`,`not_in`,`not_ends_with`,`not_contains`,`is_null`,`not_starts_with`,`is_not_null`,`equals`,`in`,`contains`                                                                                                         | | `model`                       | Indicates the server model, such as: MCS R340 or R640                                                      | `starts_with`,`not_equals`,`ends_with`,`not_in`,`not_ends_with`,`not_contains`,`is_null`,`not_starts_with`,`is_not_null`,`equals`,`in`,`contains`                                                                                                         | | `os_version`                  | Ubuntu Operating System version                                                                            | `starts_with`,`not_equals`,`ends_with`,`not_in`,`not_ends_with`,`not_contains`,`is_null`,`not_starts_with`,`is_not_null`,`equals`,`in`,`contains`                                                                                                         | | `serial_number`               | Server serial number                                                                                       | `starts_with`,`not_equals`,`ends_with`,`not_in`,`not_ends_with`,`not_contains`,`is_null`,`not_starts_with`,`is_not_null`,`equals`,`in`,`contains`                                                                                                         | | `num_of_interfaces`           | The number of interfaces of the collection server                                                          | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`less`,`between`,`not_ends_with`,`not_contains`,`greater`,`not_starts_with`,`in`                             | | `management_ip`               | Indicates the Data/Management port IP address                                                              | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`between`,`less`,`not_ends_with`,`not_contains`,`greater`,`not_in_subnet`,`not_starts_with`,`in_subnet`,`in` | | `idrac_ip`                    | Indicates the IP address of the Integrated Dell Remote Access Controller (IDRAC)                           | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`between`,`less`,`not_ends_with`,`not_contains`,`greater`,`not_in_subnet`,`not_starts_with`,`in_subnet`,`in` | | `management_mac`              | Indicates the Data/Management port MAC address                                                             | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`less`,`between`,`not_ends_with`,`not_contains`,`greater`,`not_starts_with`,`in`                             | | `uptime_days`                 | Indicates the number of days the server is up                                                              | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`less`,`between`,`not_ends_with`,`not_contains`,`greater`,`not_starts_with`,`in`                             | | `avg_traffic_past_month_mbps` | Indicates the average volume in megabits per second (Mbps) of traffic sent to the server in the past month | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`less`,`between`,`not_ends_with`,`not_contains`,`greater`,`not_starts_with`,`in`                             | | `avg_traffic_past_week_mbps`  | Indicates the average volume in megabits per second (Mbps) of traffic sent to the server in the past week  | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`less`,`between`,`not_ends_with`,`not_contains`,`greater`,`not_starts_with`,`in`                             | | `avg_traffic_past_hour_mbps`  | Indicates the average volume in megabits per second (Mbps) of traffic sent to the server in the past hour  | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`less`,`between`,`not_ends_with`,`not_contains`,`greater`,`not_starts_with`,`in`                             | | `num_of_open_incidents`       | Indicates the number of open incidents                                                                     | `starts_with`,`not_equals`,`less_or_equal`,`greater_or_equal`,`not_between`,`is_null`,`is_not_null`,`equals`,`contains`,`ends_with`,`not_in`,`less`,`between`,`not_ends_with`,`not_contains`,`greater`,`not_starts_with`,`in`                             | | `notes`                       | Notes about the server                                                                                     | `starts_with`,`not_equals`,`ends_with`,`not_in`,`not_ends_with`,`not_contains`,`is_null`,`not_starts_with`,`is_not_null`,`equals`,`in`,`contains`                                                                                                         |  </details>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_servers_api_v1_servers_post_with_http_info(get_servers_parameters, async_req=True)
        >>> result = thread.get()

        :param get_servers_parameters: (required)
        :type get_servers_parameters: GetServersParameters
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetServersResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'get_servers_parameters'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_servers_api_v1_servers_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['get_servers_parameters'] is not None:
            _body_params = _params['get_servers_parameters']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['CustomHTTPBearer']  # noqa: E501

        _response_types_map = {
            '200': "GetServersResponse",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/servers/', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
